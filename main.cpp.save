#include <ctime>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <thread>

#include <libgpsmm.h>

enum Time_format { LOCALTIME, UTC, UNIX, ISO8601 };

auto timespec_to_time_str(const timespec& gpsd_time, Time_format time_format = LOCALTIME) -> std::string {
  // example showing different ways of formating GPSD's timespec, depending on requirement
  std::ostringstream oss;
  switch (time_format) {
    case LOCALTIME: {
      // convert timespec_t into localtime (dd-mm-YY HH:MM:SS)
      auto tm = *std::localtime(&gpsd_time.tv_sec);
      oss << std::put_time(&tm, "%d-%m-%Y %H:%M:%S");
      break;
    }
    case UTC: {
      // convert timespec_t into UTC (dd-mm-YY HH:MM:SS)
      auto tm = *std::gmtime(&gpsd_time.tv_sec);
      oss << std::put_time(&tm, "%d-%m-%Y %H:%M:%S");
      break;
    }
    case UNIX:
      // returns seconds since the Epoch
      oss << gpsd_time.tv_sec;
      break;
    case ISO8601: {
      // convert timespec_t into ISO8601 UTC time (yyyy-MM-dd'T'HH:mm:ss'Z')
      const size_t scr_size{128};
      std::array<char, scr_size> scr{};
    //  timespec_to_iso8601(gpsd_time, scr.data(), scr_size);
      oss << scr.data();
      break;
    }
  }
  return oss.str();
}

int main()
{
  gpsmm gps_rec("localhost", DEFAULT_GPSD_PORT);

  if (gps_rec.stream(WATCH_ENABLE | WATCH_JSON) == nullptr) {
    std::cerr << "No GPSD running.\n";
    return 1;
  }
  char t_string[100];
  auto const waiting_time{1000000};  // 1000000 is 1 second
  auto const decimal_precision{6};

  for (;;) {
    if (!gps_rec.waiting(waiting_time)) continue;

    struct gps_data_t* gpsd_data;

    if ((gpsd_data = gps_rec.read()) == nullptr) {
      std::cerr << "GPSD read error.\n";
      return 1;
    }

    while (((gpsd_data = gps_rec.read()) == nullptr) || (gpsd_data->fix.mode < MODE_2D)) {
      // Do nothing until fix, block execution for 1 second (busy wait mitigation)
      std::this_thread::sleep_for(std::chrono::seconds(1));
    }

    auto latitude{gpsd_data->fix.latitude};
    auto longitude{gpsd_data->fix.longitude};
    auto hdop{gpsd_data->dop.hdop};
    auto vdop{gpsd_data->dop.vdop};
    auto pdop{gpsd_data->dop.pdop};
    auto s_vis{gpsd_data->satellites_visible};
    auto s_used{gpsd_data->satellites_used};

//auto time_str{timespec_to_time_str(gpsd_data->fix.time, UNIX)};  // you can change the 2nd argument to LOCALTIME, UTC, UNIX or ISO8601
    sprintf(t_string,"%ld",gpsd_data->fix.time.tv_sec);

    std::cout.precision(decimal_precision);  // set decimal precision
    std::cout.setf(std::ios::fixed, std::ios::floatfield);
    std::cout << t_string << "," << latitude << "," << longitude << "," << hdop << "," << vdop << "," << pdop << "," << s_vis << "," << s_used << '\n';
  }
}
